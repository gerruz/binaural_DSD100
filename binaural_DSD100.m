%DSD100 directory
s = dir('DSD6/Sources/Test');

%It takes the names of each song folder
folder_list = {s.name};
folder_list = string(folder_list(3:end));

%For loop for all the DSD100 dataset
for idx = 1:numel(folder_list)
    
    %Input and output path for each song
    inputpath = '/Users/gerard/smc_local/master_thesis/bin_dataset/TwoEars-master/DSD6/Sources/Test/' + folder_list(idx) + '/';
    outputpath = '/Users/gerard/smc_local/master_thesis/bin_dataset/TwoEars-master/BDSD6/Sources/Test/' + folder_list(idx) + '/';
    
    %Distance from the listener in x and y equally (0.7071 for a diagonal
    %distance of 1)
    dist = 0.7071;
    
    %Binaural simulator for four sources
    sim = simulator.SimulatorConvexRoom();
    set(sim, ...
        'HRIRDataset', simulator.DirectionalIR( ...
            'impulse_responses/qu_kemar_anechoic/QU_KEMAR_anechoic_1m.sofa'), ...
        'Sources', {simulator.source.Point(), simulator.source.Point(), simulator.source.Point(), simulator.source.Point()}, ...
        'Sinks',   simulator.AudioSink(2) ...
        );
    set(sim.Sources{1}, ...
        'Name', 'drums', ...
        'Position', [dist; dist; 0], ...
        'AudioBuffer', simulator.buffer.FIFO(1) ...
        );
    set(sim.Sources{1}.AudioBuffer, ...
        'File', char(inputpath + 'drums.wav') ...
        );
    set(sim.Sources{2}, ...
        'Name', 'vocals', ...
        'Position', [dist; -dist; 0], ...
        'AudioBuffer', simulator.buffer.FIFO(1) ...
        );
    set(sim.Sources{2}.AudioBuffer, ...
        'File', char(inputpath + 'vocals.wav') ...
        );
    set(sim.Sources{3}, ...
        'Name', 'bass', ...
        'Position', [-dist; dist; 0], ...
        'AudioBuffer', simulator.buffer.FIFO(1) ...
        );
    set(sim.Sources{3}.AudioBuffer, ...
        'File', char(inputpath +  'bass.wav') ...
        );
    set(sim.Sources{4}, ...
        'Name', 'other', ...
        'Position', [-dist; -dist; 0], ...
        'AudioBuffer', simulator.buffer.FIFO(1) ...
        );
    set(sim.Sources{4}.AudioBuffer, ...
        'File', char(inputpath + 'other.wav') ...
        );
    set(sim.Sinks, ...
        'Name', 'Head', ...
        'UnitX', [1; 0; 0], ...
        'Position', [0; 0; 0] ...
        );
  
    %% initialization
    % note that all the parameters including objects' positions have to be
    % defined BEFORE initialization in order to init properly  
    sim.set('Init',true);

    %%
    while ~sim.isFinished()
        sim.set('Refresh',true);  % refresh all objects
        sim.set('Process',true);
    end
    
    %Checking if the output directory exists. If not, creates it
    if ~exist(char(outputpath), 'dir')
        mkdir(char(outputpath))
        disp(outputpath)
        disp('THE FOLDER DID NOT EXIST, CREATING IT...')
    end
    
    %Saves the file in the output directory
    data = sim.Sinks.getData();
    sim.Sinks.saveFile(char(outputpath + 'binaural.wav'),sim.SampleRate);
    sim.plot();
    sim.set('ShutDown',true);
    
end